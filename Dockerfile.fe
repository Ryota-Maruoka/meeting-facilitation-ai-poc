# ===== deps =====
FROM --platform=linux/amd64 public.ecr.aws/docker/library/node:20-bullseye-slim AS deps
WORKDIR /app/frontend

# npm を前提に、必要なマニフェストだけを確実にコピー
COPY frontend/package.json ./package.json
COPY frontend/package-lock.json ./package-lock.json

# 依存インストール（CI: 再現性のため）
RUN npm ci

# ===== builder =====
FROM --platform=linux/amd64 public.ecr.aws/docker/library/node:20-bullseye-slim AS builder
WORKDIR /app/frontend
ENV CI=true

# 依存を先にコピー（キャッシュ有効化）
COPY --from=deps /app/frontend/node_modules ./node_modules

# アプリ本体をコピー
COPY frontend/ ./

## ビルド時に必要な環境変数を焼き込む
## - BACKEND_API_URL: next.config.mjs の rewrites 用（絶対URL推奨）
## - NEXT_PUBLIC_API_URL: クライアント直叩きAPIの上書き（相対 /backend-api 推奨）
ARG BACKEND_API_URL="http://54.250.241.155:8000"
ARG NEXT_PUBLIC_API_URL="/backend-api"
ENV BACKEND_API_URL=${BACKEND_API_URL}
ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}

# Next.js ビルド
# （必要に応じてメモリ不足対策）:
# ENV NODE_OPTIONS=--max-old-space-size=2048
RUN npm run build

# ===== runner =====
FROM --platform=linux/amd64 public.ecr.aws/docker/library/node:20-bullseye-slim AS runner
WORKDIR /app/frontend
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# 実行に必要なファイルのみ配置
COPY --from=builder /app/frontend/.next ./.next
COPY --from=builder /app/frontend/public ./public
COPY --from=builder /app/frontend/package.json ./package.json
# Next の実行に依存が必要なため node_modules も持ち込む
COPY --from=deps    /app/frontend/node_modules ./node_modules

EXPOSE 3000
CMD ["npm","run","start","--","-p","3000","-H","0.0.0.0"]
