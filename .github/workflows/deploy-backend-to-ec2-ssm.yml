name: Deploy Backend to EC2 (via SSM)

# mainブランチへのpush時、またはbackend/配下の変更時に実行
on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  workflow_dispatch:  # 手動実行も可能

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Package backend files
        run: |
          cd backend
          zip -r backend-deploy.zip app/ run.py requirements.txt
          ls -lh backend-deploy.zip

      - name: Upload to S3
        run: |
          cd backend
          aws s3 cp backend-deploy.zip s3://${{ secrets.S3_DEPLOY_BUCKET }}/backend-deploy.zip
          echo "✅ Uploaded to S3"

      - name: Deploy to EC2 via SSM
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy backend from GitHub Actions" \
            --parameters 'commands=[
              "echo \"========================================\"",
              "echo \"  EC2バックエンド自動デプロイ (SSM)\"",
              "echo \"========================================\"",
              "echo \"\"",
              "echo \"[1/4] S3からファイルをダウンロード中...\"",
              "cd /tmp",
              "aws s3 cp s3://${{ secrets.S3_DEPLOY_BUCKET }}/backend-deploy.zip . || exit 1",
              "echo \"✅ ダウンロード完了\"",
              "echo \"\"",
              "echo \"[2/4] ファイルを展開中...\"",
              "unzip -o backend-deploy.zip -d ~/backend/ || exit 1",
              "rm backend-deploy.zip",
              "echo \"✅ 展開完了\"",
              "echo \"\"",
              "echo \"[3/4] サービスを再起動中...\"",
              "sudo systemctl restart meeting-api || exit 1",
              "sleep 3",
              "echo \"✅ 再起動完了\"",
              "echo \"\"",
              "echo \"[4/4] 動作確認中...\"",
              "curl -f http://localhost:8000/health || exit 1",
              "echo \"✅ 動作確認完了\"",
              "echo \"\"",
              "echo \"========================================\"",
              "echo \"  デプロイ完了！\"",
              "echo \"========================================\""
            ]' \
            --output text \
            --query 'Command.CommandId')
          
          echo "Command ID: $COMMAND_ID"
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV

      - name: Wait for command completion
        run: |
          echo "Waiting for SSM command to complete..."
          echo "Command ID: ${{ env.COMMAND_ID }}"
          echo "Instance ID: ${{ secrets.EC2_INSTANCE_ID }}"
          
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id ${{ env.COMMAND_ID }} \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query 'Status' \
              --output text || echo "Pending")
            
            echo "Status: $STATUS (attempt $i/60)"
            
            # デバッグ情報を追加
            if [ "$i" -eq 1 ] || [ "$i" -eq 10 ] || [ "$i" -eq 30 ]; then
              echo "=== Debug Info (attempt $i) ==="
              aws ssm get-command-invocation \
                --command-id ${{ env.COMMAND_ID }} \
                --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
                --query 'Status' \
                --output text
              echo "=== End Debug Info ==="
            fi
            
            if [ "$STATUS" = "Success" ]; then
              echo "✅ Deployment successful!"
              exit 0
            elif [ "$STATUS" = "Failed" ]; then
              echo "❌ Deployment failed!"
              echo "=== Error Output ==="
              aws ssm get-command-invocation \
                --command-id ${{ env.COMMAND_ID }} \
                --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
                --query 'StandardErrorContent' \
                --output text
              echo "=== Standard Output ==="
              aws ssm get-command-invocation \
                --command-id ${{ env.COMMAND_ID }} \
                --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
                --query 'StandardOutputContent' \
                --output text
              exit 1
            fi
            
            sleep 10
          done
          
          echo "⚠️ Timeout waiting for deployment"
          echo "=== Final Status Check ==="
          aws ssm get-command-invocation \
            --command-id ${{ env.COMMAND_ID }} \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query 'Status' \
            --output text
          exit 1

      - name: Show deployment logs
        if: always()
        run: |
          echo "=== Deployment Output ==="
          aws ssm get-command-invocation \
            --command-id ${{ env.COMMAND_ID }} \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query 'StandardOutputContent' \
            --output text || echo "No output available"

      - name: Cleanup S3
        if: always()
        run: |
          aws s3 rm s3://${{ secrets.S3_DEPLOY_BUCKET }}/backend-deploy.zip || true

