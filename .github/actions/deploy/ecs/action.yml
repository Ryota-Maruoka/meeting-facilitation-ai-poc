name: Deploy to ECS
description: Build, tag, push image to ECR and deploy to ECS

### -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- ###
### inputs                                                                    ###
### -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- ###
inputs:
  aws-access-key-id:
    description: AWS access key ID
    required: true
  aws-secret-access-key:
    description: AWS secret access key
    required: true
  aws-region:
    description: AWS region
    required: true
  ecr-repository:
    description: ECR repository name
    required: true
  image-tag:
    description: Image tag
    required: true
  cluster-name:
    description: ECS cluster name
    required: true
  service-name:
    description: ECS service name
    required: true
  container-name:
    description: Container name in the task definition
    required: true
  task-definition-name:
    description: Task definition name
    required: true
  dockerfile:
    description: Dockerfile path
    required: true
  context:
    description: Context path
    required: true


### -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- ###
### runs                                                                      ###
### -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- ###
runs:
  using: 'composite'
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        IMAGE_TAG: ${{ inputs.image-tag }}
      run: |
        docker build -f ${{ inputs.dockerfile }} \
         -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ${{ inputs.context }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      shell: bash

    - name: Fetch TaskDefinition from ECS and generate task-def.json
      id: task-def-template
      run: |
        aws ecs describe-task-definition --task-definition ${{ inputs.task-definition-name }} | jq '.taskDefinition | del (.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' > task-def.json
      shell: bash

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-def.json
        container-name: ${{ inputs.container-name }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      id: deploy-api
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        cluster: ${{ inputs.cluster-name }}
        service: ${{ inputs.service-name }}
        wait-for-service-stability: false
        propagate-tags: TASK_DEFINITION